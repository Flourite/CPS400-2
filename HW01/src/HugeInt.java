// Produced by Congyou Liu. SUID = 839098402public class HugeInt{    private String number;    private int sign;    public HugeInt(){number = "0"; sign = 1;}    public HugeInt(String s){        if (s.charAt(0) == '+'){            sign = 1;            number = s.substring(1);        }        else if (s.charAt(0) == '-'){            sign = -1;            number = s.substring(1);        }        else{            sign = 1;            number = s;        }    }    public String toString(){        String s = "";        if ((sign == -1)&&(!number.equals("0"))){            s = s + "-";        }        s = s + number;        return s;    }    public HugeInt add(HugeInt n){        HugeInt answer = new HugeInt();        HugeInt nn = new HugeInt();        nn.number = n.number;        int c = 0;        int n1, n2, sum;        int len1 = number.length();        int len2 = n.number.length();        int i1 = len1 - 1;        int i2 = len2 - 1;        answer.number = "";        if (sign != n.sign){            nn.sign = n.sign * (-1);            return subtract(nn);        }        else {            answer.sign = sign;            while ((i1 >= 0)||(i2 >= 0)||(c > 0)){                if (i1 < 0){                    n1 = 0;                }                else {                    n1 = number.charAt(i1) - '0';                }                if (i2 < 0){                    n2 = 0;                }                else {                    n2 = n.number.charAt(i2) - '0';                }                sum = (n1 + n2 + c) % 10;                c = (n1 + n2 + c) / 10;                i1 = i1 - 1;                i2 = i2 - 1;                answer.number = "" + sum + answer.number;            }            answer.number = clean(answer.number);            return answer;        }    }    public HugeInt subtract(HugeInt n){        HugeInt answer = new HugeInt();        HugeInt nn = new HugeInt();        nn.number = n.number;        int c = 0;        int n1, n2, sub;        int len1 = number.length();        int len2 = n.number.length();        int i1 = len1 - 1;        int i2 = len2 - 1;        String s1 = number;        String s2 = n.number;        answer.number = "";        if (sign != n.sign){            nn.sign = n.sign * (-1);            return add(nn);        }        else {            if (absCompare(number, n.number) == 1){                answer.sign = sign;            }            else if (absCompare(number, n.number) == 0){                answer.sign = 1;            }            else{                answer.sign = sign * (-1);                s1 = n.number;                i1 = len2 - 1;                s2 = number;                i2 = len1 - 1;            }            while ((i1 >= 0)||(i2 >= 0)||(c < 0)){                if (i1 < 0){                    n1 = 0;                }                else {                    n1 = s1.charAt(i1) - '0';                }                if (i2 < 0){                    n2 = 0;                }                else {                    n2 = s2.charAt(i2) - '0';                }                sub = (n1 + c + 10 - n2) % 10;                c = (n1 + c + 10 - n2) / 10 - 1;                i1 = i1 - 1;                i2 = i2 - 1;                answer.number = "" + sub + answer.number;            }            answer.number = clean(answer.number);            return answer;        }    }    public HugeInt multiply(HugeInt n){        HugeInt answer = new HugeInt();        HugeInt temp = new HugeInt();        String s;        int c = 0;        int n1, n2, mul;        int len1 = number.length();        int len2 = n.number.length();        int i1;        int i2 = len2 - 1;        if (sign != n.sign){            answer.sign = -1;        }        else {            answer.sign = 1;        }        for (int i = i2;i >= 0;i--){            n2 = n.number.charAt(i) - '0';            s = "";            i1 = len1 - 1;            while ((i1 >= 0)||(c > 0)){                if (i1 < 0){                    n1 = 0;                }                else {                    n1 = number.charAt(i1) - '0';                }                mul = (n1 * n2 + c) % 10;                c = (n1 * n2 + c) / 10;                i1 = i1 - 1;                s = "" + mul + s;            }            for (int j = i;j < i2;j++){                s = s + "0";            }            temp.number = s;            temp.sign = answer.sign;            answer = answer.add(temp);        }        answer.number = clean(answer.number);        return answer;    }    public int compareTo(HugeInt n){        if (sign != n.sign){            if (sign == 1){                return 1;            }            else return -1;        }        else {            if (sign == 1){                if (absCompare(number, n.number) == 1){                    return 1;                }                else if (absCompare(number, n.number) == 0){                    return 0;                }                else return -1;            }            else {                if (absCompare(number, n.number) == 1){                    return -1;                }                else if (absCompare(number, n.number) == 0){                    return 0;                }                else return 1;            }        }    }    private String clean(String s){        int len = 0;        while ((s.charAt(len) == '0')&&(len < s.length() - 1)){            len++;        }        s = s.substring(len);        return s;    }    private int absCompare(String s1, String s2){        int len1 = s1.length();        int len2 = s2.length();        if (len1 < len2){            return -1;        }        else if (len1 > len2){            return 1;        }        else {            if (s1.compareTo(s2) > 0){                return 1;            }            else if (s1.compareTo(s2) == 0){                return 0;            }            else return -1;        }    }}